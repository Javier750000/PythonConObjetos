'''
int: 1
float: 2
char: 3
bool: 4
+: 11
-: 12
*: 13
/: 14
<: 15
<=: 16
>: 17
>=: 18
=: 19
==: 20
<>: 21
&&: 22
||: 23
Error: -1
'''

class CuboSemantico:
    def __init__(self):
        self.table = {
            (1, 1, 11): 1,
            (1, 1, 12): 1,
            (1, 1, 13): 1,
            (1, 1, 14): 1,
            (1, 1, 15): 4,
            (1, 1, 16): 4,
            (1, 1, 17): 4,
            (1, 1, 18): 4,
            (1, 1, 19): 1,
            (1, 1, 20): 4,
            (1, 1, 21): 4,
            (1, 1, 22): -1,
            (1, 1, 23): -1,

            (1, 2, 11): 2,
            (1, 2, 12): 2,
            (1, 2, 13): 2,
            (1, 2, 14): 2,
            (1, 2, 15): 4,
            (1, 2, 16): 4,
            (1, 2, 17): 4,
            (1, 2, 18): 4,
            (1, 2, 19): 1,
            (1, 2, 20): 4,
            (1, 2, 21): 4,
            (1, 2, 22): -1,
            (1, 2, 23): -1,

            (1, 3, 11): -1,
            (1, 3, 12): -1,
            (1, 3, 13): -1,
            (1, 3, 14): -1,
            (1, 3, 15): -1,
            (1, 3, 16): -1,
            (1, 3, 17): -1,
            (1, 3, 18): -1,
            (1, 3, 19): -1,
            (1, 3, 20): -1,
            (1, 3, 21): -1,
            (1, 3, 22): -1,
            (1, 3, 23): -1,

            (1, 4, 11): -1,
            (1, 4, 12): -1,
            (1, 4, 13): -1,
            (1, 4, 14): -1,
            (1, 4, 15): -1,
            (1, 4, 16): -1,
            (1, 4, 17): -1,
            (1, 4, 18): -1,
            (1, 4, 19): -1,
            (1, 4, 20): -1,
            (1, 4, 21): -1,
            (1, 4, 22): -1,
            (1, 4, 23): -1,

            (2, 1, 11): 2,
            (2, 1, 12): 2,
            (2, 1, 13): 2,
            (2, 1, 14): 2,
            (2, 1, 15): 4,
            (2, 1, 16): 4,
            (2, 1, 17): 4,
            (2, 1, 18): 4,
            (2, 1, 19): 2,
            (2, 1, 20): 4,
            (2, 1, 21): 4,
            (2, 1, 22): -1,
            (2, 1, 23): -1,

            (2, 2, 11): 2,
            (2, 2, 12): 2,
            (2, 2, 13): 2,
            (2, 2, 14): 2,
            (2, 2, 15): 4,
            (2, 2, 16): 4,
            (2, 2, 17): 4,
            (2, 2, 18): 4,
            (2, 2, 19): 2,
            (2, 2, 20): 4,
            (2, 2, 21): 4,
            (2, 2, 22): -1,
            (2, 2, 23): -1,

            (2, 3, 11): -1,
            (2, 3, 12): -1,
            (2, 3, 13): -1,
            (2, 3, 14): -1,
            (2, 3, 15): -1,
            (2, 3, 16): -1,
            (2, 3, 17): -1,
            (2, 3, 18): -1,
            (2, 3, 19): -1,
            (2, 3, 20): -1,
            (2, 3, 21): -1,
            (2, 3, 22): -1,
            (2, 3, 23): -1,

            (2, 4, 11): -1,
            (2, 4, 12): -1,
            (2, 4, 13): -1,
            (2, 4, 14): -1,
            (2, 4, 15): -1,
            (2, 4, 16): -1,
            (2, 4, 17): -1,
            (2, 4, 18): -1,
            (2, 4, 19): -1,
            (2, 4, 20): -1,
            (2, 4, 21): -1,
            (2, 4, 22): -1,
            (2, 4, 23): -1,

            (3, 1, 11): -1,
            (3, 1, 12): -1,
            (3, 1, 13): -1,
            (3, 1, 14): -1,
            (3, 1, 15): -1,
            (3, 1, 16): -1,
            (3, 1, 17): -1,
            (3, 1, 18): -1,
            (3, 1, 19): -1,
            (3, 1, 20): -1,
            (3, 1, 21): -1,
            (3, 1, 22): -1,
            (3, 1, 23): -1,

            (3, 2, 11): -1,
            (3, 2, 12): -1,
            (3, 2, 13): -1,
            (3, 2, 14): -1,
            (3, 2, 15): -1,
            (3, 2, 16): -1,
            (3, 2, 17): -1,
            (3, 2, 18): -1,
            (3, 2, 19): -1,
            (3, 2, 20): -1,
            (3, 2, 21): -1,
            (3, 2, 22): -1,
            (3, 2, 23): -1,

            (3, 3, 11): -1,
            (3, 3, 12): -1,
            (3, 3, 13): -1,
            (3, 3, 14): -1,
            (3, 3, 15): -1,
            (3, 3, 16): -1,
            (3, 3, 17): -1,
            (3, 3, 18): -1,
            (3, 3, 19): 3,
            (3, 3, 20): 4,
            (3, 3, 21): 4,
            (3, 3, 22): -1,
            (3, 3, 23): -1,

            (3, 4, 11): -1,
            (3, 4, 12): -1,
            (3, 4, 13): -1,
            (3, 4, 14): -1,
            (3, 4, 15): -1,
            (3, 4, 16): -1,
            (3, 4, 17): -1,
            (3, 4, 18): -1,
            (3, 4, 19): -1,
            (3, 4, 20): -1,
            (3, 4, 21): -1,
            (3, 4, 22): -1,
            (3, 4, 23): -1,

            (4, 1, 11): -1,
            (4, 1, 12): -1,
            (4, 1, 13): -1,
            (4, 1, 14): -1,
            (4, 1, 15): -1,
            (4, 1, 16): -1,
            (4, 1, 17): -1,
            (4, 1, 18): -1,
            (4, 1, 19): -1,
            (4, 1, 20): -1,
            (4, 1, 21): -1,
            (4, 1, 22): -1,
            (4, 1, 23): -1,

            (4, 2, 11): -1,
            (4, 2, 12): -1,
            (4, 2, 13): -1,
            (4, 2, 14): -1,
            (4, 2, 15): -1,
            (4, 2, 16): -1,
            (4, 2, 17): -1,
            (4, 2, 18): -1,
            (4, 2, 19): -1,
            (4, 2, 20): -1,
            (4, 2, 21): -1,
            (4, 2, 22): -1,
            (4, 2, 23): -1,

            (4, 3, 11): -1,
            (4, 3, 12): -1,
            (4, 3, 13): -1,
            (4, 3, 14): -1,
            (4, 3, 15): -1,
            (4, 3, 16): -1,
            (4, 3, 17): -1,
            (4, 3, 18): -1,
            (4, 3, 19): -1,
            (4, 3, 20): -1,
            (4, 3, 21): -1,
            (4, 3, 22): -1,
            (4, 3, 23): -1,

            (4, 4, 11): -1,
            (4, 4, 12): -1,
            (4, 4, 13): -1,
            (4, 4, 14): -1,
            (4, 4, 15): -1,
            (4, 4, 16): -1,
            (4, 4, 17): -1,
            (4, 4, 18): -1,
            (4, 4, 19): 4,
            (4, 4, 20): 4,
            (4, 4, 21): 4,
            (4, 4, 22): 4,
            (4, 4, 23): 4,
        }

    def validarTipos(self, tipoIzq, tipoDer, operador):
        if (tipoIzq, tipoDer, operador) in self.table:
            return self.table[(tipoIzq, tipoDer, operador)]
        return None
